version: 0.2

env:
  variables:
    EKS_CLUSTER_NAME: "eksDeepDiveFrankfurt"
    AWS_DEFAULT_REGION: "eu-central-1" 
    K8S_NAMESPACE: "default"
    DEPLOYMENT_NAME: "todolist-almfnmsal" 
    CONTAINER_NAME: "todolist-almfnmsal" 
phases:
  pre_build:
    commands:
      - echo "Commit id: $CODEBUILD_RESOLVED_SOURCE_VERSION"
      - export SHORT_COMMIT=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - export IMAGE_TAG=${SHORT_COMMIT}
      - echo "IMAGE_TAG=$IMAGE_TAG"
      - aws --version
      - $(aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com)
  build:
    commands:
      - docker build -t ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:$IMAGE_TAG .
      - docker images
  post_build:
    commands:
      - echo "Push da imagem para o ECR..."
      - docker push ${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:$IMAGE_TAG
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION
      - kubectl config current-context
      - kubectl -n $K8S_NAMESPACE set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=${ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPO_NAME}:$IMAGE_TAG --record
      - kubectl -n $K8S_NAMESPACE rollout status deployment/$DEPLOYMENT_NAME --timeout=120s
artifacts:
  files:
    - imagedefinitions.json
